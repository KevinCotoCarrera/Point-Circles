import Head from 'next/head'
import React, { useState } from 'react'
type TPoint = {
  x: number,
  y: number,
}
export default function Home() {
  const [points, setPoints] = useState<TPoint[]>([])
  const [undoPoints, setundoPoints] = useState<TPoint[]>([])
  function handleClickCircles(e: React.MouseEvent<HTMLDivElement>){
    const {clientX, clientY} = e;
    setPoints([...points, {
      x: clientX,
      y: clientY
    }])
  
  }
  function handleUndo(){
    const newPoints = [...points];
    const poppedPoint = newPoints.pop();
    if(!poppedPoint) return;
    setundoPoints([...undoPoints ,poppedPoint])
    setPoints(newPoints)
  }
  function handleRedo(){
    const newUndoPoints = [...undoPoints]
    const poppedPoint = newUndoPoints.pop()
    if(!poppedPoint) return;
    setPoints([...points, poppedPoint])
    setundoPoints(newUndoPoints)

  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <button className='bg-rose-500 disabled:bg-rose-200 text-white text-lg px-6 py-2 m-2 rounded-md shadow-xl' disabled={points.length === 0}onClick={handleUndo}>Undo</button>
      <button className='bg-emerald-500 disabled:bg-emerald-200 text-white text-lg px-6 py-2 m-2 rounded-md shadow-xl' disabled={undoPoints.length ===0} onClick={handleRedo}>Redo</button>
      <div className=' h-screen bg-slate-900' onClick={handleClickCircles}>
        {points.map((point) =>(
        <div
        className='absolute inline-block bg-emerald-400 rounded-full w-4 h-4'
        style={{
          left: point.x + 'px',
          top: point.y + 'px'
          }}
        >
          
        </div>
        ))}
      </div>
    </>
  )
}
